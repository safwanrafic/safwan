#include <iostream>
#include <string>
#include <regex>

bool isValidFunctionDeclaration(const std::string& declaration) {
    std::regex pattern(R"(^\s*([a-zA-Z_]\w*)\s+(\w+)\s*\(([^)]*)\)\s*;$)");
    return std::regex_match(declaration, pattern);
}

bool isValidVariableDeclaration(const std::string& declaration) {
    std::regex pattern(R"(^\s*([a-zA-Z_]\w*)\s+(\w+)\s*;$)");
    return std::regex_match(declaration, pattern);
}

bool isValidFunctionDefinition(const std::string& definition) {
    std::regex pattern(R"(^\s*([a-zA-Z_]\w*)\s+(\w+)\s*\(([^)]*)\)\s*{\s*.*\s*}$)");
    return std::regex_match(definition, pattern);
}

int main() {
    int numDeclarations;

    std::cout << "Enter the number of declarations: ";
    std::cin >> numDeclarations;
    std::cin.ignore();  // Clear the newline character

    for (int i = 0; i < numDeclarations; ++i) {
        std::string input;

        std::cout << "Enter declaration or definition " << i + 1 << ": ";
        std::getline(std::cin, input);

        if (isValidFunctionDeclaration(input)) {
            std::cout << "Valid function declaration." << std::endl;
        } else if (isValidVariableDeclaration(input)) {
            std::cout << "Valid variable declaration." << std::endl;
        } else if (isValidFunctionDefinition(input)) {
            std::cout << "Valid function definition." << std::endl;
        } else {
            std::cout << "Invalid declaration or definition." << std::endl;
        }
    }

    return 0;
}
